merged_df = full_join(biom_long, catch_long,
by = c("Year", "Group")) %>%
select(Year, Group, Biomass, Catch) %>%
filter(Catch > 0)
### Merge necessary species
reduced_df <- merged_df %>%
mutate(Group_Name = case_when(
Group == "King mackerel (1+yr)" ~ "King Mackerel",
Group == "Spanish mackerel (0-1yr)" ~ "Spanish Mackerel",
Group == "Spanish mackerel (1+yr)" ~ "Spanish Mackerel",
Group == "Gag grouper (0-3yr)" ~ "Gag Grouper",
Group == "Gag grouper (3+yr)" ~ "Gag Grouper",
Group == "Red grouper (3+yr)" ~ "Red Grouper",
Group == "Yellowedge grouper (0-3yr)" ~ "Yellowedge Grouper",
Group == "Yellowedge grouper (3+yr)" ~ "Yellowedge Grouper",
Group == "Red snapper (0yr)" ~ "Red Snapper",
Group == "Red snapper (1-2yr)" ~ "Red Snapper",
Group == "Red snapper (3+yr)" ~ "Red Snapper",
Group == "Menhaden (0yr)" ~ "Menhaden",
Group == "Menhaden (1yr)" ~ "Menhaden",
Group == "Menhaden (2yr)" ~ "Menhaden",
Group == "Menhaden (3yr)" ~ "Menhaden",
Group == "Menhaden (4yr)" ~ "Menhaden",
TRUE ~ Group
))
# Step 1: Summarize biomass and catch per group and year
summary_df <- reduced_df %>%
group_by(Year, Group_Name) %>%
summarise(
Biomass = sum(Biomass, na.rm = TRUE),
Catch = sum(Catch, na.rm = TRUE),
.groups = "drop"
)
# Step 2: Calculate Annual Surplus Production (ASP)
asp_df <- summary_df %>%
arrange(Group_Name, Year) %>%
group_by(Group_Name) %>%
mutate(B_t_minus1 = lag(Biomass),
ASP = Biomass - B_t_minus1 + Catch) %>%
filter(Year > min(Year),!Group_Name %in% to_remove) %>% # safer than `Year > 1`
ungroup()
# Step 3: Fit quadratic models per group
models <- asp_df %>%
group_by(Group_Name) %>%
nest() %>%
mutate(
model = map(data, ~ lm(ASP ~ Biomass + I(Biomass^2), data = .x)),
# Extract coefficients from model
coefs = map(model, function(m) coef(m)),
# Calculate roots (x-axis crossings) of quadratic
roots = map(coefs, function(cfs) {
a <- cfs["I(Biomass^2)"]
b <- cfs["Biomass"]
c <- cfs["(Intercept)"]
disc <- b^2 - 4*a*c
if (disc < 0 || a == 0) {
return(c(NA_real_, NA_real_))
}
root1 <- (-b - sqrt(disc)) / (2*a)
root2 <- (-b + sqrt(disc)) / (2*a)
sort(c(root1, root2))
}),
# Define prediction range based on roots
biomass_range = map(roots, ~ {
if (any(is.na(.x))) {
return(tibble(Biomass = numeric()))
} else {
tibble(Biomass = seq(from = .x[1], to = .x[2], length.out = 100))
}
}),
# Predict ASP from model over biomass range
predictions = map2(model, biomass_range, function(m, b_range) {
if (nrow(b_range) == 0) return(tibble(Biomass = numeric(), ASP = numeric()))
predict(m, newdata = b_range) %>%
as_tibble() %>%
rename(ASP = value) %>%
bind_cols(b_range)
}),
# Find the MSY point (max predicted ASP)
MSY_point = map(predictions, ~ slice_max(.x, ASP, n = 1))
)
# === Unnest for plotting ===
predicted_data <- models %>%
select(Group_Name, predictions) %>%
unnest(predictions)
msy_values <- models %>%
select(Group_Name, MSY_point) %>%
unnest(MSY_point)
# === Plot ===
## All groups
all_spec = ggplot()+
geom_point(data = asp_df, aes(x = Biomass, y = ASP), alpha = 0.5) +
geom_line(data = predicted_data, aes(x = Biomass, y = ASP), color = "blue", size = 1) +
geom_point(data = msy_values, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for all species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
ylim(0,NA)
filename = "All Species ASP-Biomass.png"
ggsave(filename,all_spec,height = unit(8,"in"),width=unit(10,"in"))
## Federally managed groups
feds_asp = asp_df %>% filter(Group_Name %in% fed_groups) %>% mutate(Year = Year + 1980)
feds_pred = predicted_data %>% filter(Group_Name %in% fed_groups)
feds_msy = msy_values %>% filter(Group_Name %in% fed_groups)
head(feds_asp)
feds = ggplot() +
geom_point(data = feds_asp, aes(x = Biomass, y = ASP,color = Year), alpha = 0.8) +
geom_line(data = feds_pred, aes(x = Biomass, y = ASP), color = "black", size = 1) +
geom_point(data = feds_msy, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for relevant species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
scale_color_gradient(low = "lightblue", high = "darkblue", limits = c(1980, 2020)) +
ylim(0,NA)
filename = "Fed Species ASP-Biomass.png"
ggsave(filename,feds,height = unit(8,"in"),width=unit(10,"in"))
# === Review ===
area = 310000
all_msy2 = msy_values %>%
filter(Biomass > 0) %>%
mutate(Cap = Biomass * area) %>%
group_by(Group_Name) %>%
summarize(Cap = mean(Cap)) %>%
mutate(Type = "Found")
remaining_sp1 <- asp_df %>%
filter(!(Group_Name %in% unique(all_msy2$Group_Name))) %>%
group_by(Group_Name) %>%
summarize(Cap = mean(Biomass)*area) %>%
mutate(Type = "Unfound")
all_dat1 = rbind(all_msy2,remaining_sp1)
eco_cap1 = sum(all_dat1$Cap)
eco_cap1
all_dat1[order(all_dat1$Cap),] %>% as.data.frame()
to_remove = c("Mobile epifauna","Sessile epifauna","Zooplankton","Cephalopod")
## Load in Ecospace data ----
### Biomass
biom = read.csv(paste0("./",ecospace_scen,"/Ecospace_Annual_Average_Biomass.csv"),check.names = F)
biom_long = biom %>%
pivot_longer(cols = c(colnames(biom)[2:ncol(biom)])) %>%
rename(Group = name,Biomass = value)
### Grab names of functional groups
fgs = names(biom)[2:length(names(biom))]
### Catch
catch = read.csv(paste0("./",ecospace_scen,"/Ecospace_Annual_Average_Catch.csv"),check.names = F)
catch_long = catch %>%
pivot_longer(cols = c(colnames(catch)[2:ncol(catch)])) %>%
mutate(Group = str_extract(name, "(?<=\\|).*")) %>%
rename(Catch = value)
merged_df = full_join(biom_long, catch_long,
by = c("Year", "Group")) %>%
select(Year, Group, Biomass, Catch) %>%
filter(Catch > 0)
### Merge necessary species
reduced_df <- merged_df %>%
mutate(Group_Name = case_when(
Group == "King mackerel (1+yr)" ~ "King Mackerel",
Group == "Spanish mackerel (0-1yr)" ~ "Spanish Mackerel",
Group == "Spanish mackerel (1+yr)" ~ "Spanish Mackerel",
Group == "Gag grouper (0-3yr)" ~ "Gag Grouper",
Group == "Gag grouper (3+yr)" ~ "Gag Grouper",
Group == "Red grouper (3+yr)" ~ "Red Grouper",
Group == "Yellowedge grouper (0-3yr)" ~ "Yellowedge Grouper",
Group == "Yellowedge grouper (3+yr)" ~ "Yellowedge Grouper",
Group == "Red snapper (0yr)" ~ "Red Snapper",
Group == "Red snapper (1-2yr)" ~ "Red Snapper",
Group == "Red snapper (3+yr)" ~ "Red Snapper",
Group == "Menhaden (0yr)" ~ "Menhaden",
Group == "Menhaden (1yr)" ~ "Menhaden",
Group == "Menhaden (2yr)" ~ "Menhaden",
Group == "Menhaden (3yr)" ~ "Menhaden",
Group == "Menhaden (4yr)" ~ "Menhaden",
TRUE ~ Group
))
# Step 1: Summarize biomass and catch per group and year
summary_df <- reduced_df %>%
group_by(Year, Group_Name) %>%
summarise(
Biomass = sum(Biomass, na.rm = TRUE),
Catch = sum(Catch, na.rm = TRUE),
.groups = "drop"
)
# Step 2: Calculate Annual Surplus Production (ASP)
asp_df <- summary_df %>%
arrange(Group_Name, Year) %>%
group_by(Group_Name) %>%
mutate(B_t_minus1 = lag(Biomass),
ASP = Biomass - B_t_minus1 + Catch) %>%
filter(Year > min(Year),!Group_Name %in% to_remove) %>% # safer than `Year > 1`
ungroup()
# Step 3: Fit quadratic models per group
models <- asp_df %>%
group_by(Group_Name) %>%
nest() %>%
mutate(
model = map(data, ~ lm(ASP ~ Biomass + I(Biomass^2), data = .x)),
# Extract coefficients from model
coefs = map(model, function(m) coef(m)),
# Calculate roots (x-axis crossings) of quadratic
roots = map(coefs, function(cfs) {
a <- cfs["I(Biomass^2)"]
b <- cfs["Biomass"]
c <- cfs["(Intercept)"]
disc <- b^2 - 4*a*c
if (disc < 0 || a == 0) {
return(c(NA_real_, NA_real_))
}
root1 <- (-b - sqrt(disc)) / (2*a)
root2 <- (-b + sqrt(disc)) / (2*a)
sort(c(root1, root2))
}),
# Define prediction range based on roots
biomass_range = map(roots, ~ {
if (any(is.na(.x))) {
return(tibble(Biomass = numeric()))
} else {
tibble(Biomass = seq(from = .x[1], to = .x[2], length.out = 100))
}
}),
# Predict ASP from model over biomass range
predictions = map2(model, biomass_range, function(m, b_range) {
if (nrow(b_range) == 0) return(tibble(Biomass = numeric(), ASP = numeric()))
predict(m, newdata = b_range) %>%
as_tibble() %>%
rename(ASP = value) %>%
bind_cols(b_range)
}),
# Find the MSY point (max predicted ASP)
MSY_point = map(predictions, ~ slice_max(.x, ASP, n = 1))
)
# === Unnest for plotting ===
predicted_data <- models %>%
select(Group_Name, predictions) %>%
unnest(predictions)
msy_values <- models %>%
select(Group_Name, MSY_point) %>%
unnest(MSY_point)
# === Plot ===
## All groups
all_spec = ggplot()+
geom_point(data = asp_df, aes(x = Biomass, y = ASP), alpha = 0.5) +
geom_line(data = predicted_data, aes(x = Biomass, y = ASP), color = "blue", size = 1) +
geom_point(data = msy_values, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for all species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
ylim(0,NA)
filename = "All Species ASP-Biomass.png"
ggsave(filename,all_spec,height = unit(8,"in"),width=unit(10,"in"))
## Federally managed groups
feds_asp = asp_df %>% filter(Group_Name %in% fed_groups) %>% mutate(Year = Year + 1980)
feds_pred = predicted_data %>% filter(Group_Name %in% fed_groups)
feds_msy = msy_values %>% filter(Group_Name %in% fed_groups)
head(feds_asp)
feds = ggplot() +
geom_point(data = feds_asp, aes(x = Biomass, y = ASP,color = Year), alpha = 0.8) +
geom_line(data = feds_pred, aes(x = Biomass, y = ASP), color = "black", size = 1) +
geom_point(data = feds_msy, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for relevant species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
scale_color_gradient(low = "lightblue", high = "darkblue", limits = c(1980, 2020)) +
ylim(0,NA)
filename = "Fed Species ASP-Biomass.png"
ggsave(filename,feds,height = unit(8,"in"),width=unit(10,"in"))
# === Plot ===
## All groups
all_spec = ggplot()+
geom_point(data = asp_df, aes(x = Biomass, y = ASP), alpha = 0.5) +
geom_line(data = predicted_data, aes(x = Biomass, y = ASP), color = "blue", size = 1) +
geom_point(data = msy_values, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for all species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
ylim(0,NA)
filename = "All Species ASP-Biomass.png"
ggsave(filename,all_spec,height = unit(8,"in"),width=unit(10,"in"))
## Federally managed groups
feds_asp = asp_df %>% filter(Group_Name %in% fed_groups) %>% mutate(Year = Year + 1980)
feds_pred = predicted_data %>% filter(Group_Name %in% fed_groups)
feds_msy = msy_values %>% filter(Group_Name %in% fed_groups)
head(feds_asp)
feds = ggplot() +
geom_point(data = feds_asp, aes(x = Biomass, y = ASP,color = Year), alpha = 0.8) +
geom_line(data = feds_pred, aes(x = Biomass, y = ASP), color = "black", size = 1) +
geom_point(data = feds_msy, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for relevant species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
scale_color_gradient(low = "lightblue", high = "darkblue", limits = c(1980, 2020)) +
ylim(0,NA)
filename = "Fed Species ASP-Biomass.png"
ggsave(filename,feds,height = unit(8,"in"),width=unit(10,"in"))
# === Review ===
area = 310000
all_msy2 = msy_values %>%
filter(Biomass > 0) %>%
mutate(Cap = Biomass * area) %>%
group_by(Group_Name) %>%
summarize(Cap = mean(Cap)) %>%
mutate(Type = "Found")
remaining_sp1 <- asp_df %>%
filter(!(Group_Name %in% unique(all_msy2$Group_Name))) %>%
group_by(Group_Name) %>%
summarize(Cap = mean(Biomass)*area) %>%
mutate(Type = "Unfound")
all_dat1 = rbind(all_msy2,remaining_sp1)
eco_cap1 = sum(all_dat1$Cap)
eco_cap1
######################################################
##  Calculate Ecosystem Caps from Ecospace Output  ###
######################################################
## Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(purrr)
library(broom)
## Parameters
ecospace_scen = "exp2_04_MOM6-phyc-vint"
fed_groups = c("Pelagic coastal piscivores","Shallow-water grouper","Other snapper","Tilefish","Gag grouper","Goliath grouper","Gray triggerfish","Amberjack","Reef invertebrate feeders","Mutton snapper","Red grouper","Red snapper","Deep-water grouper","King Mackerel","Spanish Mackerel","Cobia","Brown shrimp","White shrimp","Pink shrimp","Menhaden","Yellowedge grouper","Small coastal sharks","Blacktip shark","Reef omnivores","Dusky shark","Large coastal sharks","")
pelagic_specs = c("Blacktip shark","Dusky shark","Large coastal sharks","Large oceanic sharks","Atlantic sharpnose shark","Small coastal sharks","Yellowfin tuna","Bluefin tuna","Other tunas","Billfish","Swordfish","Pelagic coastal piscivores","Cobia","King Mackerel","Spanish Mackerel","Oceanic piscivores","Surface pelagics","Large oceanic planktivores","Oceanic planktivores","Sardine-herring-scad","Menhaden","Anchovy-silverside-killifish","Mullet","Butterfish")
to_remove = c("Mobile epifauna","Sessile epifauna","Zooplankton","Cephalopod")
## Load in Ecospace data ----
### Biomass
biom = read.csv(paste0("./",ecospace_scen,"/Ecospace_Annual_Average_Biomass.csv"),check.names = F)
biom_long = biom %>%
pivot_longer(cols = c(colnames(biom)[2:ncol(biom)])) %>%
rename(Group = name,Biomass = value)
### Grab names of functional groups
fgs = names(biom)[2:length(names(biom))]
### Catch
catch = read.csv(paste0("./",ecospace_scen,"/Ecospace_Annual_Average_Catch.csv"),check.names = F)
catch_long = catch %>%
pivot_longer(cols = c(colnames(catch)[2:ncol(catch)])) %>%
mutate(Group = str_extract(name, "(?<=\\|).*")) %>%
rename(Catch = value)
merged_df = full_join(biom_long, catch_long,
by = c("Year", "Group")) %>%
select(Year, Group, Biomass, Catch) %>%
filter(Catch > 0)
### Merge necessary species
reduced_df <- merged_df %>%
mutate(Group_Name = case_when(
Group == "King mackerel (1+yr)" ~ "King Mackerel",
Group == "Spanish mackerel (0-1yr)" ~ "Spanish Mackerel",
Group == "Spanish mackerel (1+yr)" ~ "Spanish Mackerel",
Group == "Gag grouper (0-3yr)" ~ "Gag Grouper",
Group == "Gag grouper (3+yr)" ~ "Gag Grouper",
Group == "Red grouper (3+yr)" ~ "Red Grouper",
Group == "Yellowedge grouper (0-3yr)" ~ "Yellowedge Grouper",
Group == "Yellowedge grouper (3+yr)" ~ "Yellowedge Grouper",
Group == "Red snapper (0yr)" ~ "Red Snapper",
Group == "Red snapper (1-2yr)" ~ "Red Snapper",
Group == "Red snapper (3+yr)" ~ "Red Snapper",
Group == "Menhaden (0yr)" ~ "Menhaden",
Group == "Menhaden (1yr)" ~ "Menhaden",
Group == "Menhaden (2yr)" ~ "Menhaden",
Group == "Menhaden (3yr)" ~ "Menhaden",
Group == "Menhaden (4yr)" ~ "Menhaden",
TRUE ~ Group
))
# Step 1: Summarize biomass and catch per group and year
summary_df <- reduced_df %>%
group_by(Year, Group_Name) %>%
summarise(
Biomass = sum(Biomass, na.rm = TRUE),
Catch = sum(Catch, na.rm = TRUE),
.groups = "drop"
)
# Step 2: Calculate Annual Surplus Production (ASP)
asp_df <- summary_df %>%
arrange(Group_Name, Year) %>%
group_by(Group_Name) %>%
mutate(B_t_minus1 = lag(Biomass),
ASP = Biomass - B_t_minus1 + Catch) %>%
filter(Year > min(Year),!Group_Name %in% to_remove) %>% # safer than `Year > 1`
ungroup()
# Step 3: Fit quadratic models per group
models <- asp_df %>%
group_by(Group_Name) %>%
nest() %>%
mutate(
model = map(data, ~ lm(ASP ~ Biomass + I(Biomass^2), data = .x)),
# Extract coefficients from model
coefs = map(model, function(m) coef(m)),
# Calculate roots (x-axis crossings) of quadratic
roots = map(coefs, function(cfs) {
a <- cfs["I(Biomass^2)"]
b <- cfs["Biomass"]
c <- cfs["(Intercept)"]
disc <- b^2 - 4*a*c
if (disc < 0 || a == 0) {
return(c(NA_real_, NA_real_))
}
root1 <- (-b - sqrt(disc)) / (2*a)
root2 <- (-b + sqrt(disc)) / (2*a)
sort(c(root1, root2))
}),
# Define prediction range based on roots
biomass_range = map(roots, ~ {
if (any(is.na(.x))) {
return(tibble(Biomass = numeric()))
} else {
tibble(Biomass = seq(from = .x[1], to = .x[2], length.out = 100))
}
}),
# Predict ASP from model over biomass range
predictions = map2(model, biomass_range, function(m, b_range) {
if (nrow(b_range) == 0) return(tibble(Biomass = numeric(), ASP = numeric()))
predict(m, newdata = b_range) %>%
as_tibble() %>%
rename(ASP = value) %>%
bind_cols(b_range)
}),
# Find the MSY point (max predicted ASP)
MSY_point = map(predictions, ~ slice_max(.x, ASP, n = 1))
)
# === Unnest for plotting ===
predicted_data <- models %>%
select(Group_Name, predictions) %>%
unnest(predictions)
msy_values <- models %>%
select(Group_Name, MSY_point) %>%
unnest(MSY_point)
# === Plot ===
## All groups
all_spec = ggplot()+
geom_point(data = asp_df, aes(x = Biomass, y = ASP), alpha = 0.5) +
geom_line(data = predicted_data, aes(x = Biomass, y = ASP), color = "blue", size = 1) +
geom_point(data = msy_values, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for all species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
ylim(0,NA)
filename = "All Species ASP-Biomass.png"
ggsave(filename,all_spec,height = unit(8,"in"),width=unit(10,"in"))
## Federally managed groups
feds_asp = asp_df %>% filter(Group_Name %in% fed_groups) %>% mutate(Year = Year + 1980)
feds_pred = predicted_data %>% filter(Group_Name %in% fed_groups)
feds_msy = msy_values %>% filter(Group_Name %in% fed_groups)
head(feds_asp)
feds = ggplot() +
geom_point(data = feds_asp, aes(x = Biomass, y = ASP,color = Year), alpha = 0.8) +
geom_line(data = feds_pred, aes(x = Biomass, y = ASP), color = "black", size = 1) +
geom_point(data = feds_msy, aes(x = Biomass, y = ASP), color = "red", size = 2) +
facet_wrap(~ Group_Name, scales = "free") +
labs(
title = "Production Curve & MSY for relevant species",
y = "Annual Surplus Production (ASP; t per sq. km)",
x = "Biomass (B_t; t per sq. km)"
) +
theme_minimal()+
scale_color_gradient(low = "lightblue", high = "darkblue", limits = c(1980, 2020)) +
ylim(0,NA)
filename = "Fed Species ASP-Biomass.png"
ggsave(filename,feds,height = unit(8,"in"),width=unit(10,"in"))
# === Review ===
area = 310000
all_msy2 = msy_values %>%
filter(Biomass > 0) %>%
mutate(Cap = Biomass * area) %>%
group_by(Group_Name) %>%
summarize(Cap = mean(Cap)) %>%
mutate(Type = "Found")
remaining_sp1 <- asp_df %>%
filter(!(Group_Name %in% unique(all_msy2$Group_Name))) %>%
group_by(Group_Name) %>%
summarize(Cap = mean(Biomass)*area) %>%
mutate(Type = "Unfound")
all_dat1 = rbind(all_msy2,remaining_sp1)
eco_cap1 = sum(all_dat1$Cap)
all_dat1[order(all_dat1$Cap),] %>% as.data.frame()
spec_cap1 = all_dat1 %>%
mutate(Prop = Cap / sum(Cap))
all_dat1
eco_cap1
all_dat1
spec_cap1
spec_cap1 = all_dat1 %>%
mutate(Prop = Cap / sum(Cap)) %>%
as.data.frame()
spec_cap1
all_dat1
